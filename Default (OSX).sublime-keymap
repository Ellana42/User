[
    // swap the keybindings for paste and paste_and_indent
    { "keys": ["super+v"], "command": "paste_and_indent" },
    { "keys": ["super+shift+v"], "command": "paste" },
    { "keys": ["alt+s"], "command": "show_panel", "args": {"panel": "find", "reverse": false} },
    // Auto-pair ``$''
    //     Lifted from default file
    // insert matching $
    // note the "key": "selector" line!
    { "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$$0\\$"}, 
    "context":  
        [
            { "key": "setting.command_mode", "operator": "equal", "operand": false },
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            // do not insert this if it is escaped
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true },
            // don't insert, it inside math environments
            { "key": "selector", "operator": "not_equal", "operand": "meta.environment.math, string.other.math", "match_all": true },
            // don't insert, if there is an open dollar math environment at the end of the line
            { "key": "eol_selector", "operator": "not_equal", 
              "operand": "meta.environment.math.inline.dollar - punctuation.definition.string.end, string.other.math - punctuation.definition.string.end",
              "match_all": true }
        ] 
    },
    // fully close $$ environments
    { "keys": ["$"], "command": "insert", "args": {"characters": "$$"}, 
    "context":
        [
            { "key": "setting.command_mode", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "meta.environment.math.block.dollar" },
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            // do not insert this if it is escaped
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true }
        ]
    },
    // wrap in $
    { "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$${0:$SELECTION}\\$"}, "context":
        [
            { "key": "setting.command_mode", "operator": "equal", "operand": false },
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
        ]
    },
    // move over closing $
    { "keys": ["$"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
        [   
            { "key": "setting.command_mode", "operator": "equal", "operand": false },
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
        ]
    },
    // delete $ pair
    { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\$$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
        ]
    }
]
